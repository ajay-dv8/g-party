// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 



// WITH OPTIMIZATION
// ==============================================
// 📚 WALLET SYSTEM DATABASE SCHEMA
// ==============================================
// This schema defines a complete wallet system where users can:
// - Manage their money (wallet)
// - Send/receive funds
// - Create payment requests
// - Connect multiple payment methods
// - Receive notifications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
} 


// ==============================================
// 👤 USER MODEL
// ==============================================
model User {
  id              String    @id @default(uuid()) @db.Uuid 
  email           String    @unique
  username        String    @unique
  full_name       String
  phone           String?   @unique
  country         String?
  gender          String
  dob             String?
  bio             String?
  avatar_url      String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  wallet               Wallet?
  sentTransactions     Transaction[]     @relation("SentTransactions")
  receivedTransactions Transaction[]     @relation("ReceivedTransactions")
  fundRequests         FundRequest[]     @relation("RequestCreator")
  fundRecipients       FundRecipient[]   @relation("RequestRecipient")
  notifications        Notification[]
  linkAccesses         LinkAccess[]      // When user clicks on share links 
  streams              Livestream[]      @relation("UserStreams")

    // Social content created by this user
  posts           Post[]     @relation("UserPosts")      // All posts created by this user
  comments        Comment[]  @relation("UserComments")   // All comments created by this user
  likes           Like[]     @relation("UserLikes")      // All likes created by this user
  
  // Social connections
  followers       Follow[]   @relation("UserFollowers")  // Users who follow this user
  following       Follow[]   @relation("UserFollows")    // Users this user follows
  
  // Blocking relationships
  blockedUsers    UserBlock[] @relation("UserBlocks")    // Users this user has blocked
  blockedByUsers  UserBlock[] @relation("BlockedByUsers") // Users who have blocked this user
  
  @@index([username])
  @@index([email])
  @@index([phone])
}

// ==============================================
// 💰 WALLET MODEL
// ==============================================
model Wallet {
  id              String    @id @default(dbgenerated("CONCAT(UPPER(SUBSTRING(MD5(gen_random_uuid()::text) FROM 1 FOR 6)))"))
  balance         Decimal   @default(0) @db.Decimal(15, 2)
  status          WalletStatus @default(ACTIVE)

  connectedAccounts PaymentMethod[]

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String   @unique @db.Uuid

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([id])
}

// ==============================================
// 💳 PAYMENT METHOD MODEL
// ==============================================
// Represents different ways users can add/withdraw money
// Examples: Mobile money accounts, bank accounts
model PaymentMethod {
  id              String    @id @default(uuid()) @db.Uuid
  type            PaymentType
  accountNumber   String
  accountName     String
  isDefault       Boolean   @default(false)
  status          AccountStatus @default(ACTIVE)

  wallet          Wallet    @relation(fields: [walletId], references: [id], onDelete: Cascade)
  walletId        String

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([walletId, accountNumber])
}

// ==============================================
// 💸 TRANSACTION MODEL
// ==============================================
// Records all money movements in the system
// Examples: Deposits, withdrawals, transfers
model Transaction {
  id              String    @id @default(uuid()) @db.Uuid
  amount          Decimal   @db.Decimal(15, 2)
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  description     String?
  metadata        Json?

  sender          User?     @relation("SentTransactions", fields: [senderId], references: [id])
  senderId        String?   @db.Uuid
  recipient       User?     @relation("ReceivedTransactions", fields: [recipientId], references: [id])
  recipientId     String?   @db.Uuid
  
  fundRequest     FundRequest? @relation(fields: [requestId], references: [id])
  requestId       String?   @db.Uuid

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
}

// ==============================================
// 📢 FUND REQUEST MODEL
// ==============================================
// For requesting money from one or more people
// Example: Collecting money for a group gift
model FundRequest {
  id              String    @id @default(uuid()) @db.Uuid
  amount          Decimal   @db.Decimal(15, 2)
  title           String
  message         String?
  status          RequestStatus @default(PENDING)
  expiresAt       DateTime
  totalRecipients Int       @default(0)

  creator         User      @relation("RequestCreator", fields: [creatorId], references: [id])
  creatorId       String    @db.Uuid

  recipients      FundRecipient[]
  transactions    Transaction[] 
  shareLinks      ShareLink[]  // Links for sharing this request

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([creatorId])
  @@index([expiresAt])
}

// ==============================================
// 📬 NOTIFICATION MODEL
// ==============================================
model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  message   String
  read      Boolean  @default(false)
  
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([read])
}

// ==============================================
// 💰 FUND RECIPIENT MODEL
// ==============================================
// People who will receive funds
// Example: Fund recipients for a group gift
model FundRecipient {
  id          String      @id @default(uuid()) @db.Uuid
  amount      Decimal     @db.Decimal(15, 2)
  status      RequestStatus @default(PENDING)

  request     FundRequest @relation(fields: [requestId], references: [id])
  requestId   String      @db.Uuid
  
  user        User        @relation("RequestRecipient", fields: [userId], references: [id])
  userId      String      @db.Uuid

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([requestId])
  @@index([userId])
}


// ==============================================
// 🔗 SHARE LINK MODEL
// ==============================================
model ShareLink {
  id              String          @id @default(uuid()) @db.Uuid
  uniqueCode      String          @unique              // Unique code for the URL (e.g., abc123)
  isActive        Boolean         @default(true)       // Whether this link is still active
  expiresAt       DateTime?                            // Optional expiration time
  targetRecipients Int             @default(1)         // Number of intended recipients
  maxApplicants   Int?                                 // Max number of people who can apply (for lucky selection)
  currentApplicants Int            @default(0)         // Current number of applicants
  distributionType DistributionType @default(EQUAL)    // How funds are distributed
  selectionType   SelectionType    @default(FIXED)     // How recipients are selected
  randomRange     Int?                                 // Range for random distribution (percentage, e.g., 20 for ±20%)

  // Link to the fund request
  fundRequest     FundRequest     @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId       String          @db.Uuid

  // Link accesses/clicks
  linkAccesses    LinkAccess[]
  
  // Additional metadata for custom distribution
  distributionMetadata Json?      // For storing custom distribution data

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([uniqueCode])
  @@index([requestId])
}

// ==============================================
// 📊 LINK ACCESS MODEL
// ==============================================
model LinkAccess {
  id              String    @id @default(uuid()) @db.Uuid
  ipAddress       String?               // Optional IP address of accessor
  userAgent       String?               // Optional browser/device info
  referrer        String?               // Where the link was clicked from
  status          String?   @default("PENDING")  // Status of this applicant (PENDING, SELECTED, REJECTED)
  
  // Link to share link
  shareLink       ShareLink @relation(fields: [shareLinkId], references: [id], onDelete: Cascade)
  shareLinkId     String    @db.Uuid

  // Link to user if they were logged in
  user            User?     @relation(fields: [userId], references: [id])
  userId          String?   @db.Uuid

  createdAt       DateTime  @default(now())

  @@index([shareLinkId])
  @@index([userId])
  @@index([status])
}

// ==============================================
// 👥 FOLLOWS MODEL
// ==============================================
model Follow {
  id            String    @id @default(uuid()) @db.Uuid  // Unique identifier for the follow relationship
  
  follower      User      @relation("UserFollows", fields: [followerId], references: [id], onDelete: Cascade)
  followerId    String    @db.Uuid  // ID of the user who is following someone
  
  following     User      @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId   String    @db.Uuid  // ID of the user being followed
  
  createdAt     DateTime  @default(now())  // When the follow relationship was created
  
  // Prevents a user from following the same person twice
  @@unique([followerId, followingId])
  @@index([followerId])  // Speeds up queries for finding who a user follows
  @@index([followingId]) // Speeds up queries for finding a user's followers
}

// ==============================================
// 🚫 USER BLOCK MODEL
// ==============================================
model UserBlock {
  id            String    @id @default(uuid()) @db.Uuid  // Unique identifier for the block relationship
  
  blocker       User      @relation("UserBlocks", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId     String    @db.Uuid  // ID of the user who is blocking someone
  
  blocked       User      @relation("BlockedByUsers", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId     String    @db.Uuid  // ID of the user being blocked
  
  createdAt     DateTime  @default(now())  // When the block was created
  
  // Prevents a user from blocking the same person twice
  @@unique([blockerId, blockedId])
  @@index([blockerId])  // Speeds up queries for finding who a user has blocked
  @@index([blockedId])  // Speeds up queries for finding who has blocked a user
}

// ==============================================
// 📝 POST MODEL
// ==============================================
model Post {
  id            String    @id @default(uuid()) @db.Uuid  // Unique identifier for the post
  content       String    // Text content of the post
  mediaUrls     String[]  // Array of media URLs (images, videos, etc.) attached to the post
  
  author        User      @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String    @db.Uuid  // ID of the user who created the post
  
  likes         Like[]    // All likes on this post
  comments      Comment[] // All comments on this post
  
  createdAt     DateTime  @default(now())  // When the post was created
  updatedAt     DateTime  @updatedAt       // When the post was last updated
  
  @@index([authorId])  // Speeds up queries for finding posts by a specific author
  @@index([createdAt]) // Speeds up queries for sorting posts by creation time
}

// ==============================================
// 💬 COMMENT MODEL
// ==============================================
model Comment {
  id         String     @id @default(uuid()) @db.Uuid
  content    String
  author     User       @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String     @db.Uuid
  post       Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String?    @db.Uuid
  
  parentComment Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   String?   @db.Uuid  // Nullable: for replies to replies
  replies    Comment[] @relation("CommentReplies") // Nested replies

  likes      Like[]    @relation("CommentLikes")    // Support for likes on replies

  // likesOnComment Like[] @relation("LikeOnComment")
  // likesOnReply   Like[] @relation("ReplyLikes")
  
  createdAt     DateTime  @default(now())  // When the comment was created
  updatedAt     DateTime  @updatedAt       // When the comment was last updated
  
  @@index([authorId])  // Speeds up queries for finding comments by a specific author
  @@index([postId])    // Speeds up queries for finding comments on a specific post
  @@index([parentId])  // Speeds up queries for finding replies to a specific comment
}

// ==============================================
// ❤️ LIKE MODEL
// ==============================================
model Like {
  id            String    @id @default(uuid()) @db.Uuid  // Unique identifier for the like
  
  user          User      @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @db.Uuid  // ID of the user who created the like
  
  post          Post?     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?   @db.Uuid  // ID of the liked post (null if this is a comment like)
  
  comment    Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String?   @db.Uuid  // ID of the liked comment (null if this is a post like)

  // reply      Comment? @relation("ReplyLikes", fields: [replyId], references: [id], onDelete: Cascade)
  // replyId    String?  @db.Uuid  // New field to track likes on replies
  
  createdAt     DateTime  @default(now())  // When the like was created
  
  // Ensures a user can only like a post once
  @@unique([userId, postId]) 
  @@unique([userId, commentId])
  // @@unique([userId, replyId])   
  @@index([userId])    // Speeds up queries for finding likes by a specific user
  @@index([postId])    // Speeds up queries for finding likes on a specific post
  @@index([commentId]) // Speeds up queries for finding likes on a specific comment
  // @@index([replyId])   // Speeds up queries for finding likes on a specific reply
}

// ==============================================
// 📺 LIVESTREAM MODEL
// ==============================================
model Livestream {
  id            String        @id @default(uuid()) @db.Uuid
  title         String
  description   String?
  streamKey     String    @unique  // Unique key for streaming
  status        StreamStatus @default(OFFLINE)
  thumbnailUrl  String?
  startedAt     DateTime?
  endedAt       DateTime?
  
  // Creator relationship
  creator       User      @relation("UserStreams", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId     String    @db.Uuid
  
  // Stream stats
  viewCount     Int       @default(0)
  likeCount     Int       @default(0)
  
  // Additional metadata
  tags          String[]
  category      String?
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([creatorId])
  @@index([status])
  @@index([startedAt])
}
 


// ==============================================
// ENUMS
// ==============================================
enum RequestStatus {
  PENDING
  COMPLETED
  CANCELLED
  EXPIRED
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
  REQUEST_PAYMENT
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  CLOSED
}

enum PaymentType {
  BANK_ACCOUNT
  MOBILE_MONEY
  CARD
}

enum WalletStatus {
  ACTIVE
  INACTIVE
  FROZEN
}
// Distribution type enum
enum DistributionType {
  EQUAL         // All recipients get equal amounts
  CUSTOM        // Creator assigns custom amounts
  RANDOM        // Random amounts within a specified range (±20%)
}

enum SelectionType {
  FIXED                // Exact number of recipients
  LUCKY_FIRST_COME     // First come, first served for lucky draw
  LUCKY_RANDOM         // Random selection from all applicants
  LUCKY_CUSTOM         // Custom selection from all applicants
}

enum StreamStatus {
  OFFLINE
  LIVE
  ENDED
}

 
 
/* 🔄 SYSTEM-WIDE RECOMMENDED IMPROVEMENTS:

1. Audit Trail:
   - Add an AuditLog model to track all important changes
   - Record who made changes and when
   - Store old and new values

2. Security Features:
   - Add rate limiting for transactions
   - Add two-factor authentication support
   - Add IP address tracking
   - Add device fingerprinting

3. Performance Optimizations:
   - Add database partitioning for transactions
   - Add caching for wallet balances
   - Add materialized views for reports
   - Add database sharding for scaling

4. Business Features:
   - Add loyalty points system
   - Add recurring payments
   - Add bill splitting
   - Add merchant accounts
   - Add group wallets

5. Compliance:
   - Add KYC verification
   - Add transaction limits by user level
   - Add compliance reporting
   - Add risk scoring
*/